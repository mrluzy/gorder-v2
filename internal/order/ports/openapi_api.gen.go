// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /customer/{customer_id}/order)
	PostCustomerCustomerIdOrder(c *gin.Context, customerId string)

	// (GET /customer/{customer_id}/order/{order_id})
	GetCustomerCustomerIdOrderOrderId(c *gin.Context, customerId string, orderId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCustomerCustomerIdOrder operation middleware
func (siw *ServerInterfaceWrapper) PostCustomerCustomerIdOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId string

	err = runtime.BindStyledParameter("simple", false, "customer_id", c.Param("customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customer_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCustomerCustomerIdOrder(c, customerId)
}

// GetCustomerCustomerIdOrderOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerCustomerIdOrderOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId string

	err = runtime.BindStyledParameter("simple", false, "customer_id", c.Param("customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter customer_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameter("simple", false, "order_id", c.Param("order_id"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomerCustomerIdOrderOrderId(c, customerId, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/customer/:customer_id/order", wrapper.PostCustomerCustomerIdOrder)
	router.GET(options.BaseURL+"/customer/:customer_id/order/:order_id", wrapper.GetCustomerCustomerIdOrderOrderId)
}
